{{#paper-toolbar}}
  <div class="md-toolbar-tools">
    {{#paper-sidenav-toggle as |toggle|}}
      {{#paper-button target=toggle action="toggleMenu" icon-button=true}}{{paper-icon "menu"}}{{/paper-button}}
    {{/paper-sidenav-toggle}}
    <span class="md-breadcrumb-page">Text Fields</span>
  </div>
{{/paper-toolbar}}
{{#paper-content class="md-padding"}}
  <div class="doc-content">
    <div layout="" layout-sm="column">
      {{paper-input flex=30 label="Name" value=name}}
      {{paper-input flex=30 label="E-mail" type="email" value=email}}
      {{paper-input flex=40 label="Password" type="password"}}
    </div>
    <div layout="" layout-sm="column">
      {{paper-input flex=true label="Submission date" type="date" value=date}}
      {{paper-input flex=true label="Company (disabled)" type="text" value="Google" disabled=true}}
    </div>

    {{paper-input textarea=true label="Biography" value=biography}}
    <p>Name: {{name}}</p>
    <p>Email: {{email}}</p>

    <h3>Input Errors</h3>
    <p>
      {{paper-input
        label="Address"
        value=address
        required=true
        required-errortext="Address is required."
      }}
      {{paper-input
        type="number"
        label="Maximum Value"
        value=maxNumber
        max="5"
        max-errortext="Enter 5 or less."
      }}
      {{paper-input
        type="number"
        label="Minimum Value"
        value=minNumber
        min="1"
        min-errortext="Enter at least 1."
      }}
      {{paper-input
        label="Maximum Character Length"
        value=maxLength
        required=true
        maxlength="10"
        maxlength-errortext="Maximum length exceeded."
      }}
      {{paper-input
        label="All Constraints"
        value=allConstraints
        required=true
        min="2"
        max="10"
        maxlength="2"
        maxlength-errortext="Max length exceeded."
      }}
      {{paper-input
        label="Required asterisk only"
        value=requiredStyle
        required="style"
      }}
    </p>

    <h3>Icons</h3>
    <p>
      {{paper-input label="Name" value=name icon="person"}}
      {{paper-input placeholder="Phone Number" type="text" value=user.phone icon="phone"}}
      {{paper-input label="Email (no messages)" type="email" value=user.email icon="email" required=true hideAllMessages=true}}
      {{paper-input placeholder="Address" type="text" value=user.address icon="place"}}
      {{paper-input label="Name on right" type="text" value=name2 iconRight="person"}}
    </p>

    <h3>Template</h3>
    {{#code-block language="handlebars"}}
\{{paper-input label="Name" value=name}}
\{{paper-input label="E-mail" type="email" value=email}}
\{{paper-input label="Password" type="password"}}
\{{paper-input label="Submission date" type="date" value=date}}
\{{paper-input textarea=true label="Biography" value=biography}}

\{{paper-input label="Address" value=address required=true required-errortext="Address is required."}}
\{{paper-input label="Maximum Value" value=maxNumber max="5" max-errortext="Enter 5 or less."}}
\{{paper-input label="Minimum Value" value=minNumber min="1" min-errortext="Enter at least 1."}}
\{{paper-input label="Maximum Character Length" value=maxLength required=true maxlength="10" maxlength-errortext="Maximum length exceeded."}}
\{{paper-input
  label="All Constraints"
  value=allConstraints
  required=true
  min="2"
  max="10"
  maxlength="2"
  maxlength-errortext="Max length exceeded."
}}
\{{paper-input
  label="Required asterisk only"
  value=requiredStyle
  required="style"
}}

  &lt;h3&gt;Icons&lt;/h3&gt;
  &lt;p&gt;
    \{{paper-input label="Name" value=name icon="person"}}
    \{{paper-input placeholder="Phone Number" type="text" value=user.phone icon="phone"}}
    \{{paper-input label="Email (required)" type="email" value=user.email icon="email" required=true hideAllMessages=true}}
    \{{paper-input placeholder="Address" type="text" value=user.address icon="place"}}
  &lt;/p&gt;
    {{/code-block}}
    <p>
      <strong>About Required.</strong>
      Note that {{#code-inline}}required{{/code-inline}}, when set to {{#code-inline}}true{{/code-inline}}
      both causes the input element to be validated to contain a value and causes the label to be styled
      with a required asterisk (*). If only the asterisk styling is desired, such as when using external
      validation mesages, use {{#code-inline}}required="style"{{/code-inline}}. To set the
      html5 required attributed on the input element itself, use the {{#code-inline}}passThru{{/code-inline}}
      option, setting {{#code-inline}}required="required"{{/code-inline}} as described below.
    </p>

    <h3>Input Attributes</h3>
    <p>
      These additional attributes will be passed through to the input helper inside of paper-input.
      See the Ember <a href="http://guides.emberjs.com/v2.0.0/templates/input-helpers/">Input Helpers</a> for more information.
      This is an example of using one of the attributes.
    </p>
    <p>
      {{paper-input
        value=numberTest
        label="Number of bagels"
        type="number"
        passThru=(hash min="0" step="13" )
      }}
    </p>
    <p>
      {{#code-block language="handlebars"}}
\{{paper-input
  value=numberTest
  label="Number of bagels"
  type="number"
  passThru=(hash min="0" step="13" )
}}
      {{/code-block}}
    </p>

    <h4>Available Attributes for Text Fields</h4>
    <p>
      {{#code-inline}}accept{{/code-inline}},
      {{#code-inline}}autocomplete{{/code-inline}},
      {{#code-inline}}autosave{{/code-inline}},
      {{#code-inline}}form{{/code-inline}},
      {{#code-inline}}formaction{{/code-inline}},
      {{#code-inline}}formenctype{{/code-inline}},
      {{#code-inline}}formmethod{{/code-inline}},
      {{#code-inline}}formnovalidate{{/code-inline}},
      {{#code-inline}}formtarget{{/code-inline}},
      {{#code-inline}}inputmode{{/code-inline}},
      {{#code-inline}}maxlength{{/code-inline}},
      {{#code-inline}}min{{/code-inline}},
      {{#code-inline}}max{{/code-inline}},
      {{#code-inline}}multiple{{/code-inline}},
      {{#code-inline}}name{{/code-inline}},
      {{#code-inline}}pattern{{/code-inline}},
      {{#code-inline}}required{{/code-inline}},
      {{#code-inline}}selectionDirection{{/code-inline}},
      {{#code-inline}}size{{/code-inline}},
      {{#code-inline}}spellcheck{{/code-inline}},
      {{#code-inline}}step{{/code-inline}},
      {{#code-inline}}tabindex{{/code-inline}}, and
      {{#code-inline}}width{{/code-inline}}.
    </p>

    <h4>Available Attributes for Text Areas</h4>
    <p>
      {{#code-inline}}cols{{/code-inline}},
      {{#code-inline}}form{{/code-inline}},
      {{#code-inline}}maxlength{{/code-inline}},
      {{#code-inline}}name{{/code-inline}},
      {{#code-inline}}readonly{{/code-inline}},
      {{#code-inline}}required{{/code-inline}},
      {{#code-inline}}rows{{/code-inline}},
      {{#code-inline}}selectionDirection{{/code-inline}},
      {{#code-inline}}selectionEnd{{/code-inline}},
      {{#code-inline}}selectionStart{{/code-inline}},
      {{#code-inline}}spellcheck{{/code-inline}},
      {{#code-inline}}tabindex{{/code-inline}}, and
      {{#code-inline}}wrap{{/code-inline}}.
    </p>

    <h3>Events</h3>
    <p>
      You may also pass through an action closures to receive notification upon
      {{#code-inline}}focusIn{{/code-inline}}, {{#code-inline}}focusOut{{/code-inline}},
      {{#code-inline}}keyDown{{/code-inline}}, and {{#code-inline}}enter{{/code-inline}}.
    </p>
    <p>
      {{paper-input
        label="Event demonstration"
        value=eventTest
        onFocusIn=(action "focusInReceived")
        onFocusOut=(action "focusOutReceived")
        onKeyDown=(action "keyDownReceived")
        onEnter=(action "enterReceived")
      }}
    {{#if eventName}}
      <div>The leaf controller for this route received the sent <strong>{{eventName}}</strong> action.</div>
    {{/if}}
    </p>
    <p>
      {{#code-block language="handlebars"}}
\{{paper-input
  label=Event demonstration
  value=eventTest
  onFocusIn=(action "focusInReceived")
  onFocusOut=(action "focusOutReceived")
  onKeyDown=(action "keyDownReceived")
  onEnter=(action "enterReceived")
}}
      {{/code-block}}
    </p>

    <h3>Custom Validations</h3>
    <p>
      In addition to {{#code-inline}}required{{/code-inline}},
      {{#code-inline}}min{{/code-inline}}, {{#code-inline}}max{{/code-inline}},
      and {{#code-inline}}maxlength{{/code-inline}}, you may define your own
      custom validations. Custom validations are defined by an object with two
      attributes, {{#code-inline}}errorMessage{{/code-inline}} and
      {{#code-inline}}isError{{/code-inline}}. You may bind a single validation
      object, or an array of validation objects.
    </p>
    <table>
      <thead>
      <tr>
        <th>Property</th>
        <th>API</th>
      </tr>
      </thead>
      <tbody>
        <tr>
          <td>errorMessage</td>
          <td>The text you want to display to the user when there is an error</td>
        </tr>
        <tr>
          <td>isError</td>
          <td>
            A function returning a truthy value when the validation message should be displayed.
            The function received one argument, which is an array containing the input's value.
          </td>
        </tr>
      </tbody>
    </table>

    <p>
      Here is an example of validating the input value matches typical email formats.
    </p>
    <p>
      {{paper-input label="E-mail" type="email" value=customemail customValidation=emailValidation}}
    </p>

    <h4>Template</h4>
    {{#code-block language="handlebars"}}
\{{paper-input label="E-mail" type="email" value=email customValidation=emailValidation}}
    {{/code-block}}
    <p>
      Define your {{#code-inline}}emailValidation{{/code-inline}} object in your controller.
    {{#code-block language="handlebars"}}
emailValidation: {
  'errorMessage': 'Please provide email in a valid format',
  'isError': (inputValue) => {
    let emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
    return !emailPattern.test(inputValue);
  }
}
      {{/code-block}}
    </p>
    <p>
      You may also define multiple custom constraints by using an array of validation objects.
    </p>
    <p>
      {{paper-input class="md-block" label="Value should be even and equal 4." type="email" value=customMultiple customValidation=multipleConstraints}}
    </p>
    {{#code-block language="handlebars"}}
\{{paper-input class="md-block" label="E-mail" type="email" value=email customValidation=multipleConstraints}}
    {{/code-block}}
    {{#code-block language="handlebars"}}
multipleConstraints: [
  {
    'errorMessage': 'Value is not even',
    'isError': (inputValue) => {
      return (+inputValue % 2) === 1;
    }
  },
  {
    'errorMessage': 'Value does not equal 4',
    'isError': (inputValue) => {
      return +inputValue !== 4;
    }
  }
];
    {{/code-block}}

    <h3>Setting validation messages from external validations</h3>
    <p>
      While {{#code-inline}}\{{paper-input}}{{/code-inline}} supplies four
      built-in validation rules and the ability to specify programmed custom
      validations, some projects need more complicated and elaborate validations,
      such as are provided by `ember-cp-validations` or another validation add-on.
      In this case, the code to validate the user input is outside of
      `paper-input`, and only the resulting messages need be provided to the
      {{#code-inline}}\{{paper-input}}{{/code-inline}} helper.
    </p>
    {{#paper-card}}
      {{#paper-card-content}}
        <div layout="" layout-sm="row">
          {{paper-input
            flex=50
            label="User name"
            value=model.username
            errors=model.validations.attrs.username.messages
          }}
        </div>
        <div layout="" layout-sm="row">
          {{paper-input
            label="Password"
            flex=34
            type="password"
            value=model.password
            errors=model.validations.attrs.password.messages
          }}
          {{paper-input
            label="E-mail"
            flex=33
            type="email"
            value=model.email
            errors=model.validations.attrs.email.messages
          }}
          {{paper-input
            label="Retype your e-mail"
            flex=33
            type="email"
            value=model.emailConfirmation
            errors=model.validations.attrs.emailConfirmation.messages
          }}
        </div>
      {{/paper-card-content}}
    {{/paper-card}}

    <h4>Template</h4>
    {{#code-block language="handlebars"}}
\{{#paper-card}}
  \{{#paper-card-content}}
  &lt;div layout="" layout-sm="row"&gt;
      \{{paper-input
        flex=50
        label="User name"
        value=model.username
        errors=model.validations.attrs.username.messages
      }}
    &lt;/div&gt;
    &lt;div layout="" layout-sm="row"&gt;
      \{{paper-input
        label="Password"
        flex=34
        type="password"
        value=model.password
        errors=model.validations.attrs.password.messages
      }}
      \{{paper-input
        label="E-mail"
        flex=33
        type="email"
        value=model.email
        errors=model.validations.attrs.email.messages
      }}
      \{{paper-input
        label="Retype your e-mail"
        flex=33
        type="email"
        value=model.emailConfirmation
        errors=model.validations.attrs.emailConfirmation.messages
      }}
    &lt;/div&gt;
  \{{/paper-card-content}}
\{{/paper-card}}
    {{/code-block}}

    <p>
      The `errors` argument can either be an array of messages or an array of
      hashes, each with a `message` property and an optional `attr` property,
      which indentifies the type of error for possible theming or other use.
      The latter format is compatible with errors from `ember-data`.
    </p>

  </div>
{{/paper-content}}
